import { Telegraf } from 'telegraf'
import cron from 'node-cron'
import { BotService } from './botService'

export class SchedulerService {
  private bot: Telegraf
  private botService: BotService

  constructor(bot: Telegraf, botService: BotService) {
    this.bot = bot
    this.botService = botService
  }

  start() {
    console.log('‚è∞ Starting scheduler service...')

    // Check for expiring trials every hour
    cron.schedule('0 * * * *', async () => {
      await this.checkExpiringTrials()
    })

    // Check for expired trials every 6 hours
    cron.schedule('0 */6 * * *', async () => {
      await this.checkExpiredTrials()
    })

    // Check for pending payments every 2 hours
    cron.schedule('0 */2 * * *', async () => {
      await this.checkPendingPayments()
    })

    console.log('‚úÖ Scheduler service started')
  }

  private async checkExpiringTrials() {
    try {
      console.log('üîç Checking expiring trials...')
      
      // This would call the API to get users with expiring trials
      // For now, we'll implement a simple check
      const expiringUsers = await this.getExpiringTrials()
      
      for (const userId of expiringUsers) {
        await this.sendTrialReminder(userId)
      }
      
      console.log(`üìß Sent ${expiringUsers.length} trial reminders`)
    } catch (error) {
      console.error('Error checking expiring trials:', error)
    }
  }

  private async checkExpiredTrials() {
    try {
      console.log('üîç Checking expired trials...')
      
      const expiredUsers = await this.getExpiredTrials()
      
      for (const userId of expiredUsers) {
        await this.sendTrialExpiredMessage(userId)
      }
      
      console.log(`üìß Sent ${expiredUsers.length} trial expired messages`)
    } catch (error) {
      console.error('Error checking expired trials:', error)
    }
  }

  private async checkPendingPayments() {
    try {
      console.log('üîç Checking pending payments...')
      
      const pendingPayments = await this.getPendingPayments()
      
      for (const payment of pendingPayments) {
        await this.sendPaymentReminder(payment.userId, payment.paymentId)
      }
      
      console.log(`üìß Sent ${pendingPayments.length} payment reminders`)
    } catch (error) {
      console.error('Error checking pending payments:', error)
    }
  }

  private async getExpiringTrials(): Promise<string[]> {
    try {
      // This would call the API to get users with expiring trials
      // For now, return empty array
      return []
    } catch (error) {
      console.error('Error getting expiring trials:', error)
      return []
    }
  }

  private async getExpiredTrials(): Promise<string[]> {
    try {
      // This would call the API to get users with expired trials
      // For now, return empty array
      return []
    } catch (error) {
      console.error('Error getting expired trials:', error)
      return []
    }
  }

  private async getPendingPayments(): Promise<{ userId: string; paymentId: string }[]> {
    try {
      // This would call the API to get pending payments
      // For now, return empty array
      return []
    } catch (error) {
      console.error('Error getting pending payments:', error)
      return []
    }
  }

  private async sendTrialReminder(userId: string) {
    try {
      const message = 
        '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ\n\n' +
        '–í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤!\n\n' +
        '–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ü–æ–º–æ–≥–∞—Ç–æ—Ä–æ–º —Å–æ —Å–∫–∏–¥–∫–æ–π 10%!\n\n' +
        '–ü—Ä–æ–º–æ–∫–æ–¥: TRIAL10'

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üí≥ –ö—É–ø–∏—Ç—å —Å–æ —Å–∫–∏–¥–∫–æ–π', callback_data: 'buy_subscription' }],
          [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', callback_data: 'open_app' }]
        ]
      }

      await this.botService.sendMessage(userId, message, keyboard)
      await this.botService.logEvent(userId, 'trial_reminder')
    } catch (error) {
      console.error('Error sending trial reminder:', error)
    }
  }

  private async sendTrialExpiredMessage(userId: string) {
    try {
      const message = 
        '‚è∞ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è\n\n' +
        '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ü–æ–º–æ–≥–∞—Ç–æ—Ä–∞!\n\n' +
        '–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:'

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'buy_subscription' }],
          [{ text: 'üìò –¢—É—Ç–æ—Ä–∏–∞–ª', callback_data: 'start_tutorial' }]
        ]
      }

      await this.botService.sendMessage(userId, message, keyboard)
      await this.botService.logEvent(userId, 'trial_expired')
    } catch (error) {
      console.error('Error sending trial expired message:', error)
    }
  }

  private async sendPaymentReminder(userId: string, paymentId: string) {
    try {
      const message = 
        'üí≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ\n\n' +
        '–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂.\n\n' +
        '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø–ª–∞—Ç—É:'

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', callback_data: `pay_${paymentId}` }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
        ]
      }

      await this.botService.sendMessage(userId, message, keyboard)
      await this.botService.logEvent(userId, 'payment_reminder', { paymentId })
    } catch (error) {
      console.error('Error sending payment reminder:', error)
    }
  }
}
