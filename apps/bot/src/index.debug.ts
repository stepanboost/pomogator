import { Telegraf } from 'telegraf'
import dotenv from 'dotenv'

// Load environment variables
dotenv.config()

console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–û–¢–ê –ù–ê RAILWAY')
console.log('=====================================')

const BOT_TOKEN = process.env.BOT_TOKEN
const WEBAPP_URL = process.env.WEBAPP_URL
const API_BASE_URL = process.env.API_BASE_URL
const NODE_ENV = process.env.NODE_ENV

console.log('üìä –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:')
console.log(`   NODE_ENV: ${NODE_ENV}`)
console.log(`   BOT_TOKEN: ${BOT_TOKEN ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (' + BOT_TOKEN.substring(0, 10) + '...)' : '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`)
console.log(`   WEBAPP_URL: ${WEBAPP_URL || '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`)
console.log(`   API_BASE_URL: ${API_BASE_URL || '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`)
console.log('')

if (!BOT_TOKEN) {
  console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!')
  console.error('üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway Dashboard')
  process.exit(1)
}

console.log('ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞...')
const bot = new Telegraf(BOT_TOKEN)

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ getMe
async function checkToken() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ getMe...')
    const botInfo = await bot.telegram.getMe()
    console.log('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π!')
    console.log(`   ID: ${botInfo.id}`)
    console.log(`   Username: @${botInfo.username}`)
    console.log(`   Name: ${botInfo.first_name}`)
    return true
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞:', error.message)
    return false
  }
}

// –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ start
bot.start(async (ctx) => {
  console.log(`üì® /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id} (@${ctx.from?.username})`)
  
  const message = `ü§ñ –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n` +
    `‚úÖ –¢–æ–∫–µ–Ω: –í–∞–ª–∏–¥–Ω—ã–π\n` +
    `‚úÖ –°–µ—Ä–≤–µ—Ä: –ó–∞–ø—É—â–µ–Ω\n` +
    `‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: –ê–∫—Ç–∏–≤–Ω—ã\n\n` +
    `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!`
  
  await ctx.reply(message)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  console.log(`üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${ctx.from?.id}: "${ctx.message.text}"`)
  
  const response = `‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: "${ctx.message.text}"\n\n` +
    `–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!`
  
  await ctx.reply(response)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback queries
bot.action('test', async (ctx) => {
  console.log('üì® Callback query "test" –ø–æ–ª—É—á–µ–Ω')
  await ctx.answerCbQuery('‚úÖ Callback —Ä–∞–±–æ—Ç–∞–µ—Ç!')
  await ctx.reply('‚úÖ Callback queries —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:', err)
  if (ctx) {
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ').catch(console.error)
  }
})

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function start() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–æ—Ç–∞...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    const tokenValid = await checkToken()
    if (!tokenValid) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ - –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω')
      process.exit(1)
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await bot.launch()
    console.log('‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')
    console.log('üìã –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –≤ Telegram')
    console.log('')
    
    // Graceful shutdown
    process.once('SIGINT', () => {
      console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...')
      bot.stop('SIGINT')
    })
    process.once('SIGTERM', () => {
      console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...')
      bot.stop('SIGTERM')
    })
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error)
    console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message)
    process.exit(1)
  }
}

start()
