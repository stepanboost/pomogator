version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: pomogator-postgres
    environment:
      POSTGRES_DB: pomogator
      POSTGRES_USER: pomogator
      POSTGRES_PASSWORD: pomogator_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pomogator -d pomogator"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: pomogator-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: pomogator-api
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://pomogator:pomogator_password@postgres:5432/pomogator
      - REDIS_URL=redis://redis:6379
      - BOT_TOKEN=${BOT_TOKEN}
      - WEBAPP_URL=${WEBAPP_URL}
      - API_BASE_URL=${API_BASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - YK_SHOP_ID=${YK_SHOP_ID}
      - YK_SECRET_KEY=${YK_SECRET_KEY}
      - YK_RETURN_URL=${YK_RETURN_URL}
      - APP_BASE_URL=${APP_BASE_URL}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  bot:
    build:
      context: .
      dockerfile: apps/bot/Dockerfile
    container_name: pomogator-bot
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://pomogator:pomogator_password@postgres:5432/pomogator
      - REDIS_URL=redis://redis:6379
      - BOT_TOKEN=${BOT_TOKEN}
      - WEBAPP_URL=${WEBAPP_URL}
      - API_BASE_URL=${API_BASE_URL}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_started
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
