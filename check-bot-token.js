const https = require('https');

// –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
const BOT_TOKEN = 'YOUR_BOT_TOKEN_HERE';

if (BOT_TOKEN === 'YOUR_BOT_TOKEN_HERE') {
  console.log('‚ùå –ó–∞–º–µ–Ω–∏ YOUR_BOT_TOKEN_HERE –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω!');
  process.exit(1);
}

console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞...');
console.log(`üìä –¢–æ–∫–µ–Ω: ${BOT_TOKEN.substring(0, 10)}...`);

const options = {
  hostname: 'api.telegram.org',
  port: 443,
  path: `/bot${BOT_TOKEN}/getMe`,
  method: 'GET'
};

const req = https.request(options, (res) => {
  let data = '';

  res.on('data', (chunk) => {
    data += chunk;
  });

  res.on('end', () => {
    try {
      const response = JSON.parse(data);
      
      if (response.ok) {
        console.log('‚úÖ –¢–æ–∫–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!');
        console.log('ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:');
        console.log(`   ID: ${response.result.id}`);
        console.log(`   Username: @${response.result.username}`);
        console.log(`   First Name: ${response.result.first_name}`);
        console.log(`   Can Join Groups: ${response.result.can_join_groups}`);
        console.log(`   Can Read All Group Messages: ${response.result.can_read_all_group_messages}`);
        console.log(`   Supports Inline Queries: ${response.result.supports_inline_queries}`);
      } else {
        console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!');
        console.log('üìã –û—à–∏–±–∫–∞:', response.description);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞:', error);
      console.log('üìã –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
    }
  });
});

req.on('error', (error) => {
  console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ:', error);
});

req.end();
