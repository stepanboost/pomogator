'use client';

import React, { useState, useEffect, useRef, Suspense } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { ChatBubble } from '@/components/ChatBubble';
import { ChatInput } from '@/components/ChatInput';
import { Header } from '@/components/Header';
import { initTelegramWebApp, applyTelegramTheme } from '@/lib/telegram';
import { addToHistory, updateHistoryItem, getHistory, HistoryItem } from '@/lib/history';
// –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤—ã–Ω–µ—Å–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ —á—Ç–æ–±—ã –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –Ω–∞ –∫–ª–∏–µ–Ω—Ç
const SYSTEM_PROMPT = `–¢—ã ‚Äî —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ—à–∞–µ—Ç –õ–Æ–ë–´–ï –∑–∞–¥–∞—á–∏ –∫–∞–∫ ChatGPT.

–¢–í–û–Ø –ì–õ–ê–í–ù–ê–Ø –ó–ê–î–ê–ß–ê: –†–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø–æ—à–∞–≥–æ–≤–æ, –¥–∞–≤–∞—è –ü–û–õ–ù–´–ï –∏ –ü–û–î–†–û–ë–ù–´–ï –æ—Ç–≤–µ—Ç—ã.

–ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–û–í:
- –†–µ—à–∞–π –∑–∞–¥–∞—á–∏ –ø–æ—à–∞–≥–æ–≤–æ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π LaTeX –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏: $L_0$, $\\Delta L$, $\\alpha$, $10^{-5}$, $¬∞C$
- –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∏–Ω–¥–µ–∫—Å—ã, —Å—Ç–µ–ø–µ–Ω–∏ –≤ LaTeX: $x_0$, $y^2$, $\\frac{1}{2}$, $\\times$
- –ü–æ–∫–∞–∑—ã–≤–∞–π –í–°–ï –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
- –î–∞–≤–∞–π —á–µ—Ç–∫–∏–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
- –û–±—ä—è—Å–Ω—è–π —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π/–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–º—ã—Å–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
- –û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ
- –ò—Å–ø–æ–ª—å–∑—É–π Markdown: **–∂–∏—Ä–Ω—ã–π**, *–∫—É—Ä—Å–∏–≤*, \`–∫–æ–¥\`
- –ù–ï –û–ë–†–ï–ó–ê–ô –æ—Ç–≤–µ—Ç—ã - –¥–∞–≤–∞–π –ø–æ–ª–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
1. **–î–∞–Ω–æ:** (–≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —É—Å–ª–æ–≤–∏—è —Å LaTeX)
2. **–†–µ—à–µ–Ω–∏–µ:** (–ø–æ–¥—Ä–æ–±–Ω–æ–µ –ø–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º–∏)
3. **–û—Ç–≤–µ—Ç:** (—á–µ—Ç–∫–∏–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
4. **–ü—Ä–æ–≤–µ—Ä–∫–∞:** (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏—è)

–ú–ê–¢–ï–ú–ê–¢–ò–ö–ê/–§–ò–ó–ò–ö–ê:
- –í—Å–µ —Ñ–æ—Ä–º—É–ª—ã –≤ LaTeX: $F = ma$, $E = mgh$, $p = mv$
- –ì—Ä–µ—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã: $\\alpha$, $\\beta$, $\\gamma$, $\\Delta$, $\\pi$
- –ï–¥–∏–Ω–∏—Ü—ã: $\\text{–º}$, $\\text{¬∞C}$, $\\text{–∫–≥}$
- –î—Ä–æ–±–∏: $\\frac{a}{b}$, —Å—Ç–µ–ø–µ–Ω–∏: $a^b$, –∏–Ω–¥–µ–∫—Å—ã: $a_b$
- –ü–æ–∫–∞–∑—ã–≤–∞–π –≤—Å–µ –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è

–•–ò–ú–ò–Ø:
- –§–æ—Ä–º—É–ª—ã: $H_2O$, $CO_2$, $Ca(OH)_2$
- –†–µ–∞–∫—Ü–∏–∏: $2H_2 + O_2 \\rightarrow 2H_2O$
- –ü–æ–∫–∞–∑—ã–≤–∞–π —Ä–∞—Å—á–µ—Ç—ã –º–æ–ª—è—Ä–Ω—ã—Ö –º–∞—Å—Å

–ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–ï:
- –ß–∏—Å—Ç—ã–π –∫–æ–¥ –≤ –±–ª–æ–∫–∞—Ö
- –û–±—ä—è—Å–Ω—è–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ—à–∞–≥–æ–≤–æ
- –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–π —Å–ª–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞
- –ü–æ–∫–∞–∑—ã–≤–∞–π –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

–í–ê–ñ–ù–û: 
- –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π LaTeX –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏! –î–∞–∂–µ $L_0 = 10$ –≤–º–µ—Å—Ç–æ L_0 = 10
- –î–∞–≤–∞–π –ü–û–õ–ù–´–ï —Ä–µ—à–µ–Ω–∏—è, –Ω–µ –æ–±—Ä–µ–∑–∞–π –æ—Ç–≤–µ—Ç—ã
- –ü–æ–∫–∞–∑—ã–≤–∞–π –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —à–∞–≥–∏`;

interface Message {
  id: string;
  role: 'user' | 'assistant' | 'system';
  content: string;
  timestamp: Date;
}

function ChatPageContent() {
  const [messages, setMessages] = useState<Message[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [currentChatId, setCurrentChatId] = useState<string | null>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const abortControllerRef = useRef<AbortController | null>(null);
  const router = useRouter();
  const searchParams = useSearchParams();

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
  const saveToHistory = React.useCallback((messages: Message[]) => {
    if (messages.length === 0) return;
    
    if (currentChatId) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–∏–∞–ª–æ–≥
      updateHistoryItem(currentChatId, messages);
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
      const chatId = addToHistory(messages);
      setCurrentChatId(chatId);
    }
  }, [currentChatId]);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    if (messages.length > 0) {
      saveToHistory(messages);
    }
  }, [messages, saveToHistory]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
  useEffect(() => {
    const initialMessage = searchParams.get('message');
    const imageBase64 = searchParams.get('image');
    const filename = searchParams.get('filename');
    const imageId = searchParams.get('imageId');
    const historyId = searchParams.get('history');
    
    if (messages.length === 0) {
      if (historyId) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        loadHistoryDialog(historyId);
      } else if (imageId) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ localStorage
        const imageData = localStorage.getItem(imageId);
        if (imageData) {
          try {
            const { base64, filename: storedFilename } = JSON.parse(imageData);
            const blob = new Blob([Uint8Array.from(atob(base64), c => c.charCodeAt(0))], { type: 'image/jpeg' });
            const imageFile = new File([blob], storedFilename || 'image.jpg', { type: 'image/jpeg' });
            handleSendImage(imageFile);
            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            localStorage.removeItem(imageId);
          } catch (error) {
            console.error('‚ùå Error loading image from localStorage:', error);
          }
        }
      } else if (imageBase64) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ URL
        try {
          // –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π base64
          const decodedBase64 = decodeURIComponent(imageBase64);
          
          // –û—á–∏—â–∞–µ–º base64 —Å—Ç—Ä–æ–∫—É –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
          const cleanBase64 = decodedBase64.replace(/[^A-Za-z0-9+/=]/g, '');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–ª–∏–Ω—É
          if (!cleanBase64 || cleanBase64.length % 4 !== 0) {
            console.error('‚ùå Invalid base64 string after cleaning:', cleanBase64);
            console.error('‚ùå Original base64:', imageBase64);
            return;
          }
          
          console.log('üñºÔ∏è Processing image from URL, base64 length:', cleanBase64.length);
          
          // –°–æ–∑–¥–∞–µ–º File –æ–±—ä–µ–∫—Ç —Å base64 –¥–∞–Ω–Ω—ã–º–∏
          const blob = new Blob([Uint8Array.from(atob(cleanBase64), c => c.charCodeAt(0))], { type: 'image/jpeg' });
          const imageFile = new File([blob], filename || 'image.jpg', { type: 'image/jpeg' });
          handleSendImage(imageFile);
        } catch (error) {
          console.error('‚ùå Error processing image from URL:', error);
          console.error('‚ùå Problematic base64:', imageBase64);
        }
      } else if (initialMessage) {
        try {
          const decodedMessage = decodeURIComponent(initialMessage);
          handleSendMessage(decodedMessage);
        } catch (error) {
          console.error('‚ùå Error decoding URL parameter:', error);
          // –ï—Å–ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          handleSendMessage(initialMessage);
        }
      }
    }
  }, [searchParams]); // –£–±—Ä–∞–ª–∏ messages –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
  const loadHistoryDialog = (historyId: string) => {
    const history = getHistory();
    const dialog = history.find(item => item.id === historyId);
    
    if (dialog) {
      setCurrentChatId(dialog.id);
      // –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
      const messagesWithUniqueIds = dialog.messages.map((msg, index) => ({
        ...msg,
        id: `${msg.role}-${Date.now()}-${index}-${Math.random().toString(36).substr(2, 9)}`
      }));
      setMessages(messagesWithUniqueIds);
    }
  };

  const handleSendMessage = React.useCallback(async (message: string) => {
    if (!message.trim() || isLoading) {
      console.log('üö´ Request blocked:', { message: !!message.trim(), isLoading });
      return;
    }

    const timestamp = Date.now();
    const randomId = Math.random().toString(36).substr(2, 9);
    const userMessageId = `user-${timestamp}-${randomId}`;
    const assistantMessageId = `assistant-${timestamp + 1}-${randomId}`;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userMessage: Message = {
      id: userMessageId,
      role: 'user',
      content: message.trim(),
      timestamp: new Date()
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
    const assistantMessage: Message = {
      id: assistantMessageId,
      role: 'assistant',
      content: '',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage, assistantMessage]);
    setIsLoading(true);

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å
    if (abortControllerRef.current) {
      const controller = abortControllerRef.current;
      abortControllerRef.current = null; // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω—É–ª—è–µ–º —Å—Å—ã–ª–∫—É
      
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–º–µ–Ω–∏—Ç—å, –Ω–æ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø—Ä–æ—Å—Ç–æ –ª–æ–≤–∏–º –æ—à–∏–±–∫—É
        controller.abort();
        console.log('üõë Previous request aborted');
      } catch (abortError) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ –æ—Ç–º–µ–Ω—ã - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        console.log('üõë Abort completed (expected)');
      }
    }
    abortControllerRef.current = new AbortController();

    console.log('üöÄ Starting SSE request:', { userMessageId, assistantMessageId });

    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è API
      const chatHistory = [...messages, userMessage].map(msg => ({
        role: msg.role,
        content: msg.content
      }));

      const response = await fetch('/api/answer', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messages: chatHistory,
          system: SYSTEM_PROMPT
        }),
        signal: abortControllerRef.current.signal,
      });

      if (!response.ok || !response.body) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      console.log('‚úÖ SSE connection established');

      const reader = response.body.getReader();
      const decoder = new TextDecoder();

      let assistantContent = '';

      // –ß–∏—Ç–∞–µ–º SSE –ø–æ—Ç–æ–∫
      while (true) {
        const { value, done } = await reader.read();
        if (done) break;

        const chunk = decoder.decode(value, { stream: true });

        // –ü–∞—Ä—Å–∏–º SSE —Å–æ–±—ã—Ç–∏—è
        for (const line of chunk.split('\n')) {
          if (!line.startsWith('data:')) continue;
          
          const data = line.slice(5).trim();
          if (data === '[DONE]') {
            console.log('‚úÖ SSE stream completed');
            break;
          }

          try {
            const json = JSON.parse(data);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É
            if (json.error) {
              throw new Error(json.error);
            }

            const delta = json?.choices?.[0]?.delta;
            if (delta?.content) {
              assistantContent += delta.content;
              
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
              setMessages(prev => {
                const copy = [...prev];
                const lastMessage = copy[copy.length - 1];
                if (lastMessage && lastMessage.role === 'assistant') {
                  lastMessage.content = assistantContent;
                }
                return copy;
              });
            }
          } catch (parseError) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ JSON (–Ω–∞–ø—Ä–∏–º–µ—Ä, keepalive —Å–æ–æ–±—â–µ–Ω–∏—è)
            console.log('Skipping invalid JSON:', data);
          }
        }
      }

      console.log('üìÑ Final assistant content length:', assistantContent.length);

    } catch (error) {
      console.error('‚ùå Error:', error);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ AbortError –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º
      if (error instanceof Error && (error.name === 'AbortError' || error.message.includes('aborted'))) {
        console.log('üõë Request was aborted - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
        return; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      }
      
      let errorMessage = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
      
      if (error instanceof Error) {
        if (error.message.includes('OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')) {
          errorMessage = error.message;
        } else if (error.message.includes('–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')) {
          errorMessage = error.message;
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –æ—à–∏–±–∫–æ–π
      setMessages(prev => {
        const copy = [...prev];
        const lastMessage = copy[copy.length - 1];
        if (lastMessage && lastMessage.role === 'assistant') {
          lastMessage.content = errorMessage;
        }
        return copy;
      });
    } finally {
      setIsLoading(false);
      abortControllerRef.current = null;
    }
  }, [messages, isLoading]);

  const handleSendImage = React.useCallback(async (file: File) => {
    if (!file || isLoading) return;

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ base64
    const base64 = await new Promise<string>((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => {
        const result = reader.result as string;
        const base64 = result.split(',')[1];
        resolve(base64);
      };
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });

    const timestamp = Date.now();
    const randomId = Math.random().toString(36).substr(2, 9);
    const userMessageId = `user-${timestamp}-${randomId}`;
    const assistantMessageId = `assistant-${timestamp + 1}-${randomId}`;

    const userMessage: Message = {
      id: userMessageId,
      role: 'user',
      content: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
      timestamp: new Date()
    };

    const assistantMessage: Message = {
      id: assistantMessageId,
      role: 'assistant',
      content: '',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage, assistantMessage]);
    setIsLoading(true);

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å
    if (abortControllerRef.current) {
      const controller = abortControllerRef.current;
      abortControllerRef.current = null; // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω—É–ª—è–µ–º —Å—Å—ã–ª–∫—É
      
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–º–µ–Ω–∏—Ç—å, –Ω–æ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø—Ä–æ—Å—Ç–æ –ª–æ–≤–∏–º –æ—à–∏–±–∫—É
        controller.abort();
        console.log('üõë Previous image request aborted');
      } catch (abortError) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ –æ—Ç–º–µ–Ω—ã - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        console.log('üõë Abort completed (expected)');
      }
    }
    abortControllerRef.current = new AbortController();

    try {
      const response = await fetch('/api/answer', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ä–µ—à–∏ –∑–∞–¥–∞—á—É',
          image: base64,
          type: 'image',
          system: SYSTEM_PROMPT
        }),
        signal: abortControllerRef.current.signal,
      });

      if (!response.ok || !response.body) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const reader = response.body.getReader();
      const decoder = new TextDecoder();

      let assistantContent = '';

      while (true) {
        const { value, done } = await reader.read();
        if (done) break;

        const chunk = decoder.decode(value, { stream: true });

        for (const line of chunk.split('\n')) {
          if (!line.startsWith('data:')) continue;
          
          const data = line.slice(5).trim();
          if (data === '[DONE]') break;

          try {
            const json = JSON.parse(data);
            
            if (json.error) {
              throw new Error(json.error);
            }

            const delta = json?.choices?.[0]?.delta;
            if (delta?.content) {
              assistantContent += delta.content;
              
              setMessages(prev => {
                const copy = [...prev];
                const lastMessage = copy[copy.length - 1];
                if (lastMessage && lastMessage.role === 'assistant') {
                  lastMessage.content = assistantContent;
                }
                return copy;
              });
            }
          } catch (parseError) {
            console.log('Skipping invalid JSON:', data);
          }
        }
      }

    } catch (error) {
      console.error('‚ùå Error:', error);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ AbortError –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º
      if (error instanceof Error && (error.name === 'AbortError' || error.message.includes('aborted'))) {
        console.log('üõë Image request was aborted - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
        return; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      }
      
      let errorMessage = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.';
      
      if (error instanceof Error) {
        if (error.message.includes('OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')) {
          errorMessage = error.message;
        }
      }

      setMessages(prev => {
        const copy = [...prev];
        const lastMessage = copy[copy.length - 1];
        if (lastMessage && lastMessage.role === 'assistant') {
          lastMessage.content = errorMessage;
        }
        return copy;
      });
    } finally {
      setIsLoading(false);
      abortControllerRef.current = null;
    }
  }, [isLoading]);

  const handleSendFile = React.useCallback(async (file: File) => {
    if (!file || isLoading) return;

    // –î–ª—è PDF —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º API upload
    if (file.type === 'application/pdf') {
      try {
        const formData = new FormData();
        formData.append('file', file);

        const response = await fetch('/api/upload', {
          method: 'POST',
          body: formData,
        });

        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const result = await response.json();
        
        if (result.error) {
          throw new Error(result.error);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await handleSendMessage(`–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç PDF —Ñ–∞–π–ª (${file.name}):\n\n${result.text}`);
      } catch (error) {
        console.error('‚ùå PDF processing error:', error);
        const errorMessage = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF —Ñ–∞–π–ª–∞';
        await handleSendMessage(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: ${errorMessage}`);
      }
    } else {
      // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64 –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const reader = new FileReader();
      reader.onload = async (e) => {
        const result = e.target?.result;
        if (typeof result === 'string') {
          const base64 = result.split(',')[1];
          await handleSendImage(new File([file], file.name, { type: file.type }));
        }
      };
      reader.readAsDataURL(file);
    }
  }, [handleSendMessage, handleSendImage, isLoading]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
  useEffect(() => {
    const init = async () => {
      try {
        await initTelegramWebApp();
        await applyTelegramTheme();
      } catch (error) {
        console.error('Telegram WebApp initialization error:', error);
      }
    };

    init();
  }, []);

  return (
    <div className="flex flex-col h-screen bg-gray-50 dark:bg-gray-900">
      <Header title="–ü–æ–º–æ–≥–∞—Ç–æ—Ä" subtitle="–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫" />
      
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((message) => (
          <ChatBubble
            key={message.id}
            message={message.content}
            isUser={message.role === 'user'}
            timestamp={message.timestamp}
          />
        ))}
        <div ref={messagesEndRef} />
      </div>

      <div className="border-t border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 p-4">
        <ChatInput
          onSendMessage={handleSendMessage}
          onSendImage={handleSendImage}
          onSendFile={handleSendFile}
          disabled={isLoading}
        />
      </div>
    </div>
  );
}

export default function ChatPage() {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <ChatPageContent />
    </Suspense>
  );
}