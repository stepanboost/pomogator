'use client';

import React, { useState, useEffect, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { initTelegramWebApp, applyTelegramTheme } from '@/lib/telegram';

export default function Home() {
  const [userInput, setUserInput] = useState('');
  const [isUploading, setIsUploading] = useState(false);
  const router = useRouter();
  const imageInputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
    const webApp = initTelegramWebApp();
    if (webApp) {
      applyTelegramTheme();
    }
  }, []);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (userInput.trim()) {
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–∞—Ç–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
      const encodedMessage = encodeURIComponent(userInput.trim());
      router.push(`/chat?message=${encodedMessage}`);
    }
  };

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    console.log('üñºÔ∏è Image upload triggered');
    console.log('üìã Event target:', e.target);
    console.log('üìã Event files:', e.target.files);
    console.log('üìã Event files length:', e.target.files?.length);
    
    const file = e.target.files?.[0];
    console.log('üìÅ Selected file:', file);
    
    if (!file) {
      console.log('‚ùå No file selected, returning early');
      return;
    }
    
    console.log('üìã File details:', {
      name: file.name,
      type: file.type,
      size: file.size
    });
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (!file.type.startsWith('image/')) {
      console.log('‚ùå Invalid file type:', file.type);
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
      e.target.value = ''; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º input
      console.log('üîÑ Input reset after validation error (file type)');
      return;
    }
    
    const maxSize = 2 * 1024 * 1024; // –£–º–µ–Ω—å—à–∏–ª–∏ –¥–æ 2 –ú–ë
    if (file.size > maxSize) {
      alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 2 –ú–ë');
      e.target.value = ''; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º input
      console.log('üîÑ Input reset after validation error (file size)');
      return;
    }

    setIsUploading(true);
    console.log('üîÑ Starting image processing...');
    
    // –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    const img = new Image();
    
    img.onload = () => {
      console.log('üñºÔ∏è Image loaded, starting compression...');
      // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const maxWidth = 800;
      const maxHeight = 600;
      let { width, height } = img;
      
      if (width > height) {
        if (width > maxWidth) {
          height = (height * maxWidth) / width;
          width = maxWidth;
        }
      } else {
        if (height > maxHeight) {
          width = (width * maxHeight) / height;
          height = maxHeight;
        }
      }
      
      canvas.width = width;
      canvas.height = height;
      
      // –†–∏—Å—É–µ–º —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      ctx?.drawImage(img, 0, 0, width, height);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64 —Å –∫–∞—á–µ—Å—Ç–≤–æ–º 0.8
      const compressedBase64 = canvas.toDataURL('image/jpeg', 0.8).split(',')[1];
      
      setIsUploading(false);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä base64
      if (compressedBase64.length > 1000000) { // ~750KB –≤ base64
        alert('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–∞–∂–µ –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.');
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º input
        const input = document.querySelector('input[type="file"][accept="image/*"]') as HTMLInputElement;
        if (input) {
          input.value = '';
          console.log('üîÑ Input reset after compression error');
        }
        return;
      }
      
      // –ï—Å–ª–∏ base64 —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è URL, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      if (compressedBase64.length > 500000) { // ~375KB –≤ base64
        console.log('üíæ Image too large for URL, saving to localStorage');
        const imageId = `temp_image_${Date.now()}`;
        localStorage.setItem(imageId, JSON.stringify({
          base64: compressedBase64,
          filename: file.name,
          timestamp: Date.now()
        }));
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        Object.keys(localStorage).forEach(key => {
          if (key.startsWith('temp_image_') && Date.now() - JSON.parse(localStorage.getItem(key) || '{}').timestamp > 300000) {
            localStorage.removeItem(key);
          }
        });
        console.log('üöÄ Navigating to chat with imageId:', imageId);
        router.push(`/chat?imageId=${imageId}`);
      } else {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —á–∞—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ URL
        console.log('üöÄ Navigating to chat with image in URL');
        // URL-–∫–æ–¥–∏—Ä—É–µ–º base64 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏
        const encodedBase64 = encodeURIComponent(compressedBase64);
        router.push(`/chat?image=${encodedBase64}&filename=${encodeURIComponent(file.name)}`);
      }
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º input –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const input = document.querySelector('input[type="file"][accept="image/*"]') as HTMLInputElement;
      if (input) {
        input.value = '';
        console.log('üîÑ Input reset after successful processing');
      }
    };
    
    img.onerror = (error) => {
      console.error('‚ùå Image processing error:', error);
      setIsUploading(false);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º input
      e.target.value = '';
      console.log('üîÑ Input reset after image processing error');
    };
    
    console.log('üîÑ Creating object URL and loading image...');
    img.src = URL.createObjectURL(file);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º input –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
    e.target.value = '';
    console.log('üîÑ Input reset after file processing');
  };

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è PDF
      if (file.type !== 'application/pdf') {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª');
        return;
      }
      
      const maxSize = 8 * 1024 * 1024; // 8 –ú–ë
      if (file.size > maxSize) {
        alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 8 –ú–ë');
        return;
      }

      setIsUploading(true);
      
      // –î–ª—è PDF —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º API upload
      const formData = new FormData();
      formData.append('file', file);

      fetch('/api/upload', {
        method: 'POST',
        body: formData,
      })
      .then(response => response.json())
      .then(result => {
        setIsUploading(false);
        if (result.error) {
          alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: ${result.error}`);
        } else {
          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —á–∞—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏–∑ PDF
          const message = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç PDF —Ñ–∞–π–ª (${file.name}):\n\n${result.text}`;
          const encodedMessage = encodeURIComponent(message);
          router.push(`/chat?message=${encodedMessage}`);
        }
      })
      .catch(error => {
        setIsUploading(false);
        alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: ${error.message}`);
      });
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="bg-white dark:bg-gray-800 shadow-sm">
        <div className="px-4 py-6">
          <h1 className="text-2xl font-bold text-center text-blue-600 dark:text-blue-400">
            –ü–æ–º–æ–≥–∞—Ç–æ—Ä
          </h1>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="px-4 py-8">
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
          <div>
            <textarea
              value={userInput}
              onChange={(e) => setUserInput(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ / —Ñ–∞–π–ª"
              className="w-full h-32 px-4 py-3 bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-xl resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
              disabled={isUploading}
            />
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ */}
          <div className="flex space-x-4">
            {/* –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ */}
            <label 
              className="relative flex-1 flex flex-col items-center justify-center p-6 bg-white dark:bg-gray-700 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-xl cursor-pointer hover:border-blue-500 dark:hover:border-blue-400 transition-colors"
              htmlFor="image-upload"
            >
              <svg className="w-8 h-8 text-gray-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
              <span className="text-sm font-medium text-gray-600 dark:text-gray-300">
                –§–æ—Ç–æ
              </span>
              <input
                id="image-upload"
                ref={imageInputRef}
                type="file"
                accept="image/*"
                onChange={handleImageUpload}
                className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                disabled={isUploading}
                style={{ zIndex: 1 }}
              />
            </label>

            {/* –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ */}
            <label className="flex-1 flex flex-col items-center justify-center p-6 bg-white dark:bg-gray-700 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-xl cursor-pointer hover:border-blue-500 dark:hover:border-blue-400 transition-colors">
              <svg className="w-8 h-8 text-gray-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
              </svg>
              <span className="text-sm font-medium text-gray-600 dark:text-gray-300">
                –§–∞–π–ª
              </span>
              <input
                type="file"
                accept=".pdf"
                onChange={handleFileUpload}
                className="hidden"
                disabled={isUploading}
              />
            </label>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
          <button
            type="submit"
            disabled={!userInput.trim() || isUploading}
            className="w-full bg-blue-500 hover:bg-blue-600 disabled:bg-gray-300 disabled:cursor-not-allowed text-white font-semibold py-4 px-6 rounded-xl transition-colors"
          >
            {isUploading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
          </button>
        </form>

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
        {isUploading && (
          <div className="mt-4 text-center">
            <div className="inline-flex items-center space-x-2 text-gray-500 dark:text-gray-400">
              <div className="w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
              <span>–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞...</span>
            </div>
          </div>
        )}
      </div>

      {/* –ù–∏–∂–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
      <div className="fixed bottom-0 left-0 right-0 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700">
        <div className="flex">
          <button
            onClick={() => router.push('/')}
            className="flex-1 flex flex-col items-center justify-center py-3 text-blue-500 dark:text-blue-400"
          >
            <svg className="w-6 h-6 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
            </svg>
            <span className="text-xs font-medium">–ì–ª–∞–≤–Ω–∞—è</span>
          </button>
          
          <button
            onClick={() => router.push('/history')}
            className="flex-1 flex flex-col items-center justify-center py-3 text-gray-400 dark:text-gray-500"
          >
            <svg className="w-6 h-6 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <span className="text-xs font-medium">–ò—Å—Ç–æ—Ä–∏—è</span>
          </button>
        </div>
      </div>
    </div>
  );
}