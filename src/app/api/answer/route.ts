import { NextRequest } from 'next/server';
import OpenAI from 'openai';

// –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ª—é–±—ã—Ö –∑–∞–¥–∞—á –∫–∞–∫ ChatGPT
const SYSTEM_PROMPT = `–¢—ã ‚Äî —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ—à–∞–µ—Ç –õ–Æ–ë–´–ï –∑–∞–¥–∞—á–∏ –∫–∞–∫ ChatGPT.

–¢–í–û–Ø –ì–õ–ê–í–ù–ê–Ø –ó–ê–î–ê–ß–ê: –†–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø–æ—à–∞–≥–æ–≤–æ, –¥–∞–≤–∞—è –ü–û–õ–ù–´–ï –∏ –ü–û–î–†–û–ë–ù–´–ï –æ—Ç–≤–µ—Ç—ã.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: 
- –ù–ò–ö–û–ì–î–ê –Ω–µ –æ–±—Ä–µ–∑–∞–π —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª—É—Å–ª–æ–≤–µ
- –í—Å–µ–≥–¥–∞ –¥–æ–≤–æ–¥–∏ —Ä–µ—à–µ–Ω–∏–µ –¥–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
- –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å–ª–æ–∂–Ω–∞—è, —Ä–∞–∑–±–∏–≤–∞–π –µ—ë –Ω–∞ —ç—Ç–∞–ø—ã –∏ —Ä–µ—à–∞–π –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø –ø–æ–ª–Ω–æ—Å—Ç—å—é
- –í –∫–æ–Ω—Ü–µ –≤—Å–µ–≥–¥–∞ –¥–∞–≤–∞–π —á–µ—Ç–∫–∏–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç

–ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–û–í:
- –†–µ—à–∞–π –∑–∞–¥–∞—á–∏ –ø–æ—à–∞–≥–æ–≤–æ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π LaTeX –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏: $L_0$, $\\Delta L$, $\\alpha$, $10^{-5}$, $¬∞C$
- –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∏–Ω–¥–µ–∫—Å—ã, —Å—Ç–µ–ø–µ–Ω–∏ –≤ LaTeX: $x_0$, $y^2$, $\\frac{1}{2}$, $\\times$
- –ü–æ–∫–∞–∑—ã–≤–∞–π –í–°–ï –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
- –î–∞–≤–∞–π —á–µ—Ç–∫–∏–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
- –û–±—ä—è—Å–Ω—è–π —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π/–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–º—ã—Å–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
- –û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ
- –ò—Å–ø–æ–ª—å–∑—É–π Markdown: **–∂–∏—Ä–Ω—ã–π**, *–∫—É—Ä—Å–∏–≤*, \`–∫–æ–¥\`
- –ù–ï –û–ë–†–ï–ó–ê–ô –æ—Ç–≤–µ—Ç—ã - –¥–∞–≤–∞–π –ø–æ–ª–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
1. **–î–∞–Ω–æ:** (–≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —É—Å–ª–æ–≤–∏—è —Å LaTeX)
2. **–†–µ—à–µ–Ω–∏–µ:** (–ø–æ–¥—Ä–æ–±–Ω–æ–µ –ø–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º–∏)
3. **–û—Ç–≤–µ—Ç:** (—á–µ—Ç–∫–∏–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
4. **–ü—Ä–æ–≤–µ—Ä–∫–∞:** (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏—è)

–ú–ê–¢–ï–ú–ê–¢–ò–ö–ê/–§–ò–ó–ò–ö–ê:
- –í—Å–µ —Ñ–æ—Ä–º—É–ª—ã –≤ LaTeX: $F = ma$, $E = mgh$, $p = mv$
- –ì—Ä–µ—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã: $\\alpha$, $\\beta$, $\\gamma$, $\\Delta$, $\\pi$
- –ï–¥–∏–Ω–∏—Ü—ã: $\\text{–º}$, $\\text{¬∞C}$, $\\text{–∫–≥}$
- –î—Ä–æ–±–∏: $\\frac{a}{b}$, —Å—Ç–µ–ø–µ–Ω–∏: $a^b$, –∏–Ω–¥–µ–∫—Å—ã: $a_b$
- –ü–æ–∫–∞–∑—ã–≤–∞–π –≤—Å–µ –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è

–•–ò–ú–ò–Ø:
- –§–æ—Ä–º—É–ª—ã: $H_2O$, $CO_2$, $Ca(OH)_2$
- –†–µ–∞–∫—Ü–∏–∏: $2H_2 + O_2 \\rightarrow 2H_2O$
- –ü–æ–∫–∞–∑—ã–≤–∞–π —Ä–∞—Å—á–µ—Ç—ã –º–æ–ª—è—Ä–Ω—ã—Ö –º–∞—Å—Å

–ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–ï:
- –ß–∏—Å—Ç—ã–π –∫–æ–¥ –≤ –±–ª–æ–∫–∞—Ö
- –û–±—ä—è—Å–Ω—è–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ—à–∞–≥–æ–≤–æ
- –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–π —Å–ª–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞
- –ü–æ–∫–∞–∑—ã–≤–∞–π –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

–í–ê–ñ–ù–û: 
- –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π LaTeX –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏! –î–∞–∂–µ $L_0 = 10$ –≤–º–µ—Å—Ç–æ L_0 = 10
- –î–∞–≤–∞–π –ü–û–õ–ù–´–ï —Ä–µ—à–µ–Ω–∏—è, –Ω–µ –æ–±—Ä–µ–∑–∞–π –æ—Ç–≤–µ—Ç—ã
- –ü–æ–∫–∞–∑—ã–≤–∞–π –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —à–∞–≥–∏
- –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å–ª–æ–∂–Ω–∞—è, —Ä–∞–∑–±–∏–≤–∞–π –µ—ë –Ω–∞ —á–∞—Å—Ç–∏ –∏ —Ä–µ—à–∞–π –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
- –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
- –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –¥–∞–≤–∞–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Ä–µ—à–µ–Ω–∏—è
- –ù–ï –ó–ê–í–ï–†–®–ê–ô —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ - –¥–æ–≤–æ–¥–∏ –¥–æ –∫–æ–Ω—Ü–∞!`;

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(request: NextRequest) {
  console.log('üöÄ API /answer called');

  try {
    const body = await request.json();
    const { message, image, type, messages, system } = body;

    console.log('üìù Request body:', { type, hasMessage: !!message, hasImage: !!image, hasMessages: !!messages });

    if (!process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY === 'your_openai_api_key_here') {
      console.error('‚ùå OpenAI API key not configured');
      return new Response('data: {"error": "OpenAI API key not configured"}\n\n', {
        status: 500,
        headers: {
          'Content-Type': 'text/event-stream; charset=utf-8',
          'Cache-Control': 'no-cache, no-transform',
          'Connection': 'keep-alive',
        },
      });
    }

    console.log('‚úÖ OpenAI API key found');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    // –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –º–æ—â–Ω—É—é –º–æ–¥–µ–ª—å
    const model = process.env.MODEL_ID || 'gpt-4o-mini';
    
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–∂–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º gpt-4o
    const hasComplexMath = message && (
      message.includes('\\int') || 
      message.includes('\\sum') || 
      message.includes('\\frac') || 
      message.includes('\\sqrt') ||
      message.includes('–º–∞—Ç—Ä–∏—Ü') ||
      message.includes('–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª') ||
      message.includes('–∏–Ω—Ç–µ–≥—Ä–∞–ª') ||
      message.includes('–ø—Ä–µ–¥–µ–ª') ||
      message.includes('—É—Ä–∞–≤–Ω–µ–Ω–∏–µ') ||
      message.includes('—Å–∏—Å—Ç–µ–º–∞') ||
      message.includes('–∑–∞–¥–∞—á–∞') ||
      message.includes('—Ä–µ—à–∏—Ç—å')
    );
    
    const selectedModel = hasComplexMath ? 'gpt-4o' : model;
    
    // –î–ª—è –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
    const isVeryComplex = message && (
      message.includes('—Å–∏—Å—Ç–µ–º–∞ —É—Ä–∞–≤–Ω–µ–Ω–∏–π') ||
      message.includes('–º–Ω–æ–≥–æ—à–∞–≥–æ–≤–∞—è') ||
      message.includes('–ø–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ') ||
      message.includes('–ø–æ–¥—Ä–æ–±–Ω–æ') ||
      message.includes('—Ä–µ—à–∏—Ç—å') ||
      message.includes('–∑–∞–¥–∞—á–∞') ||
      message.includes('–≤—ã—á–∏—Å–ª–∏—Ç—å') ||
      message.includes('–Ω–∞–π—Ç–∏') ||
      message.includes('–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å') ||
      message.length > 100
    );
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π
    const maxTokens = isVeryComplex ? 16000 : 12000;
    let chatMessages: any[] = [];

    if (messages && Array.isArray(messages)) {
      // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
      chatMessages = [
        ...(system ? [{ role: 'system', content: system }] : []),
        ...messages
      ];
    } else {
      // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      if (type === 'image' && image) {
        chatMessages = [
          { role: 'system', content: system || '–¢—ã —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ—à–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∫–∞–∫ ChatGPT.' },
          {
            role: 'user',
            content: [
              { type: 'text', text: message || '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ä–µ—à–∏ –∑–∞–¥–∞—á—É.' },
              { type: 'image_url', image_url: { url: `data:image/jpeg;base64,${image}`, detail: 'high' } }
            ]
          }
        ];
      } else {
        chatMessages = [
          { role: 'system', content: system || '–¢—ã —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ—à–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∫–∞–∫ ChatGPT.' },
          { role: 'user', content: message }
        ];
      }
    }

    console.log('üì§ Calling OpenAI API with', { 
      model: selectedModel, 
      messageCount: chatMessages.length, 
      hasComplexMath, 
      isVeryComplex, 
      maxTokens 
    });

    const stream = await openai.chat.completions.create({
      model: selectedModel,
      messages: chatMessages,
      stream: true,
      temperature: 0.3,
      top_p: 0.95,
      frequency_penalty: 0.05,
      presence_penalty: 0.1,
      max_tokens: maxTokens, // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
    });

    console.log('‚úÖ OpenAI stream created');

    // –ì–æ—Ç–æ–≤–∏–º –æ—Ç–≤–µ—Ç –∫–∞–∫ text/event-stream (SSE)
    const responseHeaders = {
      'Content-Type': 'text/event-stream; charset=utf-8',
      'Cache-Control': 'no-cache, no-transform',
      'Connection': 'keep-alive',
      'Access-Control-Allow-Origin': '*',
    };

    const encoder = new TextEncoder();
    let chunkCount = 0;

    const readable = new ReadableStream({
      async start(controller) {
        try {
          let totalContent = '';
          
          for await (const chunk of stream) {
            chunkCount++;
            const content = chunk.choices[0]?.delta?.content;
            
            if (content) {
              totalContent += content;
              console.log(`üì¶ OpenAI chunk ${chunkCount}:`, content.substring(0, 30) + (content.length > 30 ? '...' : ''));
              
              // –§–æ—Ä–º–∏—Ä—É–µ–º SSE —Å–æ–±—ã—Ç–∏–µ
              const sseData = JSON.stringify({
                choices: [{
                  delta: { content }
                }]
              });
              
              controller.enqueue(encoder.encode(`data: ${sseData}\n\n`));
            }
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –æ–±—Ä–µ–∑–∞–Ω
          const isComplete = totalContent.trim().endsWith('.') || 
                           totalContent.trim().endsWith('!') || 
                           totalContent.trim().endsWith('?') ||
                           totalContent.includes('**–û—Ç–≤–µ—Ç:**') ||
                           totalContent.includes('**–ü—Ä–æ–≤–µ—Ä–∫–∞:**');
          
          if (!isComplete && totalContent.length > 1000) {
            console.log('‚ö†Ô∏è Response might be incomplete, adding completion prompt');
            const completionPrompt = '\n\n**–ü—Ä–æ–≤–µ—Ä–∫–∞:** –†–µ—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ —É—Ç–æ—á–Ω–∏—Ç—å –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å, –¥–∞–π –∑–Ω–∞—Ç—å!';
            controller.enqueue(encoder.encode(`data: ${JSON.stringify({ content: completionPrompt })}\n\n`));
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º [DONE] —Å–∏–≥–Ω–∞–ª
          controller.enqueue(encoder.encode('data: [DONE]\n\n'));
          controller.close();

          console.log(`‚úÖ OpenAI stream completed. Total chunks: ${chunkCount}, Total content length: ${totalContent.length}, Complete: ${isComplete}`);
        } catch (error) {
          console.error('‚ùå Stream error:', error);
          const errorData = JSON.stringify({ error: 'Stream error occurred' });
          controller.enqueue(encoder.encode(`data: ${errorData}\n\n`));
          controller.close();
        }
      }
    });

    return new Response(readable, {
      headers: responseHeaders,
    });

  } catch (error) {
    console.error('‚ùå API Error:', error);
    const errorMessage = error instanceof Error ? error.message : String(error);
    
    if (errorMessage.includes('403 Country, region, or territory not supported')) {
      const errorData = JSON.stringify({ error: 'OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN.' });
      return new Response(`data: ${errorData}\n\n`, {
        status: 200,
        headers: {
          'Content-Type': 'text/event-stream; charset=utf-8',
          'Cache-Control': 'no-cache, no-transform',
          'Connection': 'keep-alive',
        },
      });
    } else if (errorMessage.includes('401')) {
      const errorData = JSON.stringify({ error: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á OpenAI.' });
      return new Response(`data: ${errorData}\n\n`, {
        status: 200,
        headers: {
          'Content-Type': 'text/event-stream; charset=utf-8',
          'Cache-Control': 'no-cache, no-transform',
          'Connection': 'keep-alive',
        },
      });
    } else {
      const errorData = JSON.stringify({ error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.' });
      return new Response(`data: ${errorData}\n\n`, {
        status: 200,
        headers: {
          'Content-Type': 'text/event-stream; charset=utf-8',
          'Cache-Control': 'no-cache, no-transform',
          'Connection': 'keep-alive',
        },
      });
    }
  }
}
